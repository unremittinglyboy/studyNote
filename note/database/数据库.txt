create database if not EXISTS `jspgou`
    default character set utf8
    default collate utf8_general_ci;
创建数据库并指定编码为utf-8

jdbc是不同数据库驱动的规范
1，Driver接口
	获取数据库驱动程序对版本号
2，DriverManager类
	jdbc一组接口中对唯一类
	常用方法：
		（1）注册数据库驱动registerDriver(Driver driver)
		（2）获取数据库连接
		     getConnection(url,user,password)
3，Connection接口
	获取发送sql语句的对象
	常用方法：
		（1）创建一个statement对象将sql语句发送到数据库 createStatement
		（2）创建一个PreparedStatement对象来将参数化的sql语句发送到数据库 createPreparedStatement(String sql)
4，Statement
	executeUpdate(String sql)
	executeQuery(String sql)

5，PreparedStatement
	executeUpdate(String sql)
	executeQuery(String sql)

6，ResultSet
	用来存放查询的结果

many的一端作为关系维护端（在数据库中）
修改被维护端的注释的mappedBy属性来对应维护端
cascade写在被维护端中

连接池参数
1，初始连接对象个数
2，最大连接数
3，最大等待时间：取对象的时间
4，最大空闲连接：用户的访问趋于稳定时的剩余连接对象数量。
5，最小空闲连接：用户的访问趋于顶峰时的剩余连接对象数量。

数据库连接池技术
sun公司制定的规范（数据库连接池接口）
DBCP C3P0

DBCP apache提供 开源、免费
步骤：
1,导入jar包 
commons-dbcp.jar core
commons-pool.jar dependency
2,dbcp获取连接对象,设置连接参数
	4个 driverName、url、name、password
	获取连接对象具体方式
	1，直接通过basicDataSourse来创建
	2，通过读配置文件创建

c3p0数据源 开源免费
性能更优越，提供了对框架的支持

**B树介绍**

B-Tree = M-way Tree

一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。
这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，磁盘I/O存取的消耗要高几个数量级，
所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。
换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。

索引文件和数据文件是分离的索引方式叫做非聚集 （mysql中的MyISAM引擎）
索引文件和数据文件不是分离的索引方式叫做聚集 （mysql中的InnoDB引擎）

MyISAM引擎：

http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/8.png
这里设表一共有三列，假设我们以Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示意。
可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，
只是主索引要求key是唯一的，而辅助索引的key可以重复。
如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：
http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/9.png
同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，
然后以data域的值为地址，读取相应数据记录。
MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。

InnoDB引擎：

http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/10.png
图10是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。
因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，
则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，
这个字段长度为6个字节，类型为长整形。

第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。
换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：
http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/11.png

！！！聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。

inner join 内连接查询返回满足条件的所有记录，默认情况下没有指定任何连接则为内连接。
left join 左外连接查询不仅返回满足条件的所有记录，而且还会返回不满足连接条件的连接操作符左边表的其他行。
right join 右外连接查询不仅返回满足条件的所有记录，而且还会返回不满足连接条件的连接操作符右边表的其他行。
mysql默认不支持full join（全连接）。想要达到全外连接的效果，可以使用union关键字连接左外连接和右外连接。left join xxx union right join xxx

**数据库优化**
索引可以设置为字段前缀来提高索引效率。

尽量在InnoDB上采用自增字段做主键 由叶子节点处数据的插入处可以看出。

- 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引 
- 尽量避免默认NULL值的出现，否则将导致引擎放弃使用索引而进行全表扫描 

既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？答案是否定的。
因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，
另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。
一般两种情况下不建议建索引。

第一种情况是表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，
让查询做全表扫描就好了。至于多少条记录才算多，这个个人有个人的看法，我个人的经验是以2000作为分界线，
记录数不超过 2000可以考虑不建索引，超过2000条可以酌情考虑索引。

另一种不建议建索引的情况是索引的选择性较低。
所谓索引的选择性（Selectivity），是指不重复的索引值（也叫基数，Cardinality）与表记录数（#T）的比值：
Index Selectivity = Cardinality / #T

explain 连接类型好坏衡量 由好到坏：const eq_reg ref range index all
system是const类型的特例，当查询的表只有一行的情况下，使用system

**explain列的解释**

table：查询的数据表

type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和all。

possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从where语句中选择一个合适的语句

key： 实际使用的索引。如果为null，则没有使用索引。很少的情况下，mysql会选择优化不足的索引。这种情况下，可以在select语句中使用use index（indexname）
来强制使用一个索引或者用ignore index（indexname）来强制mysql忽略索引

key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好

ref：显示索引的哪一列被使用了，如果可能的话，是一个常数

rows：mysql认为必须检查的用来返回请求数据的行数，mysql完成此请求扫描的行数。

extra：关于mysql如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是using temporary和using filesort，意思mysql根本不能使用索引，结果是检索会很慢。

**type中各个值解释**
（1）all：全表扫描，MySQL将遍历全表以找到匹配的行
（2）index：index与ALL区别为index类型只遍历索引树
（3）range：索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行。显而易见的索引范围扫描是带有between或者where子句	里带有<, >查询。当mysql使用索引去查找一系列值时，例如IN()和OR列表，也会显示range（范围扫描）,当然性能上面是有差异的。
（4）ref,使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配某个单独值的记录行。
（5）eq_reg，类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用	primary key或者 unique key作为关联条件。
（6）const，system，当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。system是const类型的特例，当查询的表只有一行的情况下，使用system。