1，对程序、进程、线程的理解（用360程序去理解）
答：
程序：是为了完成特定任务，用某种语言编写的一组指令的集合。
即指一段静态的代码，静态对象。

进程：是正在运行的一个程序。 是资源分配的基本单位

线程：是一个程序内部的一条执行路径。 

2，代码完成继承Thread的方式创建分线程，并遍历100以内的自然数。

3，同一题目，用实现Runnable接口实现。

4，对比两种创建方式。
第二种不会受到类的单继承性的影响，且天然存在数据共享的特点。

5，说说你对IDEA中Project和Module的理解
答：
Project相当于workspace，Module相当于project
Project相当于工程，为最顶级，不能并列了，只能开双窗口。
Module相当于工程中的模块

所谓的自旋锁指的是对有一定规律变换的属性不断进行判断，满足条件后执行，不满足则作为判断基准的属性变换后继续判断。
例子：多个线程对一个数据的自增进行操作。

cas是在对变量进行check then act操作时多进程造成的线程安全冲突的解决方法，是一种机制。
采取的是check and set的方案
本身是乐观锁

ACL访问控制列表 控制数据的进出

LDAP通信协议

悲观锁（默认线程安全冲突会产生，多个线程对共享数据的操作要一个个地进行。）
优点：多线程写入操作相对安全。
例子：
共享锁【shared locks】又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。
排他锁【exclusive locks】又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。

乐观锁（检测线程安全冲突的产生，当发生冲突时才处理，返回错误信息，由操作者选择如何对冲突进行处理。）
优点：乐观锁适用于读操作多的场景，这样可以提高程序的吞吐量。
例子：
CAS是一种锁的机制。

自旋锁是实现这种机制的一种锁

冲突频率高则采取悲观锁，追求响应效率则采取乐观锁，重调的代价大则采用悲观锁。
三种采用不是绝对的，具体还是要看实际解决的问题状况（规模等等）。

LDAP可以理解为一种树形数据库，也可以理解为是一种通信协议
总结一下LDAP树形数据库如下：
dn ：一条记录的详细位置
dc ：一条记录所属区域    (哪一颗树)
ou ：一条记录所属组织    （哪一个分支）
cn/uid：一条记录的名字/ID   (哪一个苹果名字)
LDAP目录树的最顶部就是根，也就是所谓的“基准DN"。
一条数据的详细地址形式：dn:cn=honglv,ou=bei,ou=xi,ou=dong,dc=ljheee

STL -> 模板库

cfrs跨站请求伪造

https://blog.csdn.net/u012762054/article/details/80916353

何谓Java Bean
1、所有属性为private
2、提供默认构造方法
3、提供getter和setter
4、实现serializable接口