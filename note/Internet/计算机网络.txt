通过 IP 进行定位的每个机器都有自己唯一的 IP。

127.0.0.1 叫做环回 IP，用于自己连接自己。

每个应用都有自己唯一的端口号。

计算机网络理想化具有七层结构，实际上开发只有四层。

TCP 可靠，UDP 不可靠。

![image-20210603192233451](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210603192233451.png)

java 中用于封装 IP 的类，InetAddress

![image-20210603192645644](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210603192645644.png)

java 中用于封装 IP 和端口号的类，InetSocketAddress

![image-20210603192739467](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210603192739467.png)

套接字：Socket 是应用层或者传输层的协议，相当于两层之间的桥梁。

**基于 TCP 的网络编程**

功能：由客户端发送一句话到服务端。

客户端：

```java
public class TestClient {
    public static void main(String[] args) throws IOException {
        //1.创建套接字：指定服务器的ip和端口号
        Socket s = new Socket("192.168.137.48",8888);
        //2.对于程序员来说，向外发送数据，利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个输出流就可以向外发送数据了，但是没有直接发送字符串的方法
        //所以我们又在 OutputStream 外面套了个处理流：DataOutputStream
        dos.writeUTF("你好");
        //3.关闭流 + 关闭网络资源 (倒关)：
        dos.close();
        os.close();
        s.close();
    }
}
```

服务端：

```java
public class TestServer {
    public static void main(String[] args) throws IOException {
        //1.创建套接字：指定服务器端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接收到这个Socket以后，客户端和服务端才真正产生了连接
        //3.获取到的输入流
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);

        //4.读取客户端发来的数据
        String str = dis.readUTF();
        System.out.println("客户端发来的数据为" + str);

        //5.关闭流 + 关闭网络资源：
        dis.close();
        is.close();
        s.close();
        ss.close();
    }
}
```

测试：

先开启客户端还是先开启服务器：先开服务器，以保证数据存在一个稳定的接收点。

功能：双向通信

客户端：

```java
public class TestClient {
    public static void main(String[] args) throws IOException {
        //1.创建套接字：指定服务器的ip和端口号
        Socket s = new Socket("192.168.137.48",8888);
        //2.对于程序员来说，向外发送数据，利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个输出流就可以向外发送数据了，但是没有直接发送字符串的方法
        //所以我们又在 OutputStream 外面套了个处理流：DataOutputStream
        dos.writeUTF("你好");

        //接收服务器端的会话-->利用输入流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);
        String str = dis.readUTF();
        System.out.println("服务器对我说" + "\t" + str);

        //3.关闭流 + 关闭网络资源 (倒关)：
        dis.close();
        is.close();
        dos.close();
        os.close();
        s.close();
    }
}
```

服务端：

```java
public class TestServer {
    public static void main(String[] args) throws IOException {
        //1.创建套接字：指定服务器端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接收到这个Socket以后，客户端和服务端才真正产生了连接
        //3.获取到的输入流
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);

        //4.读取客户端发来的数据
        String str = dis.readUTF();
        System.out.println("客户端发来的数据为" + str);

        //向客户端输出一句话 -> 操作流 -> 输出流
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        dos.writeUTF("你好，我是服务器，我接收到你的请求了");

        //5.关闭流 + 关闭网络资源：
        dos.close();
        os.close();
        dis.close();
        is.close();
        s.close();
        ss.close();
    }
}
```

注意：防火墙必须关闭。

功能：单线程接收用户请求(对象流传输)

实体类：

```java
package com.msb.test01;

import java.io.Serializable;

public class User implements Serializable {
    private static final long serialVersionUID = 9050691344308365540L;
    private String name;
    private String pwd;

    public User() {
    }

    public User(String name, String pwd) {
        this.name = name;
        this.pwd = pwd;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
}
```

客户端：

```java
package com.msb.test01;

import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class TestClient {
    public static void main(String[] args) {
        //1.创建套接字：指定服务器的ip和端口号
        Socket s = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        InputStream is = null;
        DataInputStream dis = null;
        try {
            s = new Socket("192.168.137.48",8888);
            //录入用户的账号和密码：
            Scanner sc = new Scanner(System.in);
            System.out.println("请录入您的账号：");
            String name = sc.next();
            System.out.println("请录入您的密码：");
            String pwd = sc.next();
            //将账号和密码封装为一个User的对象：
            User user = new User(name, pwd);

            //2.对于程序员来说，向外发送数据，利用输出流：
            os = s.getOutputStream();
            //        DataOutputStream dos = new DataOutputStream(os);
            //        //利用这个输出流就可以向外发送数据了，但是没有直接发送字符串的方法
            //        //所以我们又在 OutputStream 外面套了个处理流：DataOutputStream
            //        dos.writeUTF("你好");
            oos = new ObjectOutputStream(os);
            oos.writeObject(user);

            //接收服务器端的会话-->利用输入流：
            is = s.getInputStream();
            dis = new DataInputStream(is);
            //        String str = dis.readUTF();
            //        System.out.println("服务器对我说" + "\t" + str);
            boolean b = dis.readBoolean();
            if(b){
                System.out.println("登录成功");
            } else{
                System.out.println("登录失败");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally{
            //3.关闭流 + 关闭网络资源 (倒关)：
            try {
                if(dis!=null){
                    dis.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(is!=null){
                    is.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(oos!=null){
                    oos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(os!=null){
                    os.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(s!=null){
                    s.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
```

服务端：

```java
package com.msb.test01;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TestServer {
    public static void main(String[] args) {
        //1.创建套接字：指定服务器端口号
        ServerSocket ss = null;
        Socket s = null;
        InputStream is = null;
        ObjectInputStream ois = null;
        OutputStream os = null;
        DataOutputStream dos = null;
        try {
            ss = new ServerSocket(8888);
            //2.等着客户端发来的信息：
            s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
            //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
            //接收到这个Socket以后，客户端和服务端才真正产生了连接
            //3.获取到的输入流
            is = s.getInputStream();
            //        DataInputStream dis = new DataInputStream(is);
            ois = new ObjectInputStream(is);
            //4.读取客户端发来的数据
            User user = (User)ois.readObject();

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals("娜娜") && user.getPwd().equals("123123")){
                flag = true;
            }


            //向客户端输出一句话 -> 操作流 -> 输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            //        dos.writeUTF("你好，我是服务器，我接收到你的请求了");
            //对客户端输出结果
            dos.writeBoolean(flag);

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }


        //5.关闭流 + 关闭网络资源：
        try {
            if(dos != null){
                dos.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if(os != null){
                os.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if(ois != null){
                ois.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if(is != null){
                is.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if(s != null){
                s.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if(ss != null){
                ss.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

功能：多线程接收用户请求（服务器不宕机，采用多线程）

ServerThread

```java
package com.msb.test01;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * 线程：专门处理客户端的请求
 */
public class ServerThread extends Thread{
    //1.创建套接字：指定服务器端口号
    InputStream is = null;
    ObjectInputStream ois = null;
    OutputStream os = null;
    DataOutputStream dos = null;
    Socket s = null;

    public ServerThread(Socket s){
        this.s = s;
    }

    @Override
    public void run() {
        try{
            is = s.getInputStream();
            ois = new ObjectInputStream(is);
            //4.读取客户端发来的数据
            User user = (User)ois.readObject();

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals("娜娜") && user.getPwd().equals("123123")){
                flag = true;
            }

            //向客户端输出一句话 -> 操作流 -> 输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            //对客户端输出结果
            dos.writeBoolean(flag);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            //5.关闭流 + 关闭网络资源：
            try {
                if(dos != null){
                    dos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(os != null){
                    os.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(ois != null){
                    ois.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(is != null){
                    is.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
```

TestServer

```java
package com.msb.test01;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TestServer {
    public static void main(String[] args) {
        System.out.println("启动服务器");
        //1.创建套接字：指定服务器端口号
        ServerSocket ss = null;
        Socket s = null;
        int count = 0;//定义一个计数器，用来统计客户端的请求数
        try {
            ss = new ServerSocket(8888);
            while(true){//加入死循环，服务器一直监听客户端是否发送数据
                s = ss.accept();//阻塞方法：等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
                //每次发来的客户端请求，通过线程进行处理
                new ServerThread(s).start();
                count++;
                System.out.println("当前是第"+count+"个用户访问我们的服务器,对应的用户是：" + s.getInetAddress());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

TestClient

```java
package com.msb.test01;

import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class TestClient {
    public static void main(String[] args) {
        System.out.println("启动客户端");
        //1.创建套接字：指定服务器的ip和端口号
        Socket s = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        InputStream is = null;
        DataInputStream dis = null;
        try {
            s = new Socket("192.168.137.48",8888);
            //录入用户的账号和密码：
            Scanner sc = new Scanner(System.in);
            System.out.println("请录入您的账号：");
            String name = sc.next();
            System.out.println("请录入您的密码：");
            String pwd = sc.next();
            //将账号和密码封装为一个User的对象：
            User user = new User(name, pwd);

            //2.对于程序员来说，向外发送数据，利用输出流：
            os = s.getOutputStream();
            //        DataOutputStream dos = new DataOutputStream(os);
            //        //利用这个输出流就可以向外发送数据了，但是没有直接发送字符串的方法
            //        //所以我们又在 OutputStream 外面套了个处理流：DataOutputStream
            //        dos.writeUTF("你好");
            oos = new ObjectOutputStream(os);
            oos.writeObject(user);

            //接收服务器端的会话-->利用输入流：
            is = s.getInputStream();
            dis = new DataInputStream(is);
            //        String str = dis.readUTF();
            //        System.out.println("服务器对我说" + "\t" + str);
            boolean b = dis.readBoolean();
            if(b){
                System.out.println("登录成功");
            } else{
                System.out.println("登录失败");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally{
            //3.关闭流 + 关闭网络资源 (倒关)：
            try {
                if(dis!=null){
                    dis.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(is!=null){
                    is.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(oos!=null){
                    oos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(os!=null){
                    os.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(s!=null){
                    s.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
```

结果：

![image-20210616162949840](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210616162949840.png)

TCP：

客户端：Socket											程序感受到的流：输出流

服务器端：ServerSocket ---> Socket		 程序感受到的流：输入流

（两者地位不平等）

UDP：

发送方：DatagramSocket  发送：数据包 DatagramPacket

接收方：DatagramSocket  接收：数据包 DatagramPacket

（两者地位平等）

**基于UDP的网络编程**

单向通信

TestSend

```java
package com.msb.test02;

import java.io.IOException;
import java.net.*;

public class TestSend {
    public static void main(String[] args) throws IOException {
        System.out.println("学生上线...");
        //1.准备套接字：
        DatagramSocket ds = new DatagramSocket(8888);

        //2.准备数据包：
        String str = "你好";
        byte[] bytes = str.getBytes();
        DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName("192.168.137.48"),9999);

        //发送
        ds.send(dp);

        //关闭资源
        ds.close();
    }
}
```

TestReceive

```java
package com.msb.test02;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

public class TestReceive {
    public static void main(String[] args) throws IOException {
        System.out.println("老师上线了...");
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = new DatagramSocket(9999);
        //2.有一个空的数据表，打算用来接收对方传过来的数据包
        byte[] bytes = new byte[1024];
        DatagramPacket dp = new DatagramPacket(bytes, bytes.length);
        //3.接收对方的数据包，然后放入我们的dp数据包中填充。
        ds.receive(dp);//接收完后dp中就填充好内容了
        //4.取出数据：
        String s = new String(dp.getData(),0,dp.getLength());//数据包中的有效长度
        System.out.println("学生对我说："+s);
        //5.关闭资源
        ds.close();
    }
}
```

双向通信

TestSend

```java
package com.msb.test02;

import java.io.IOException;
import java.net.*;

public class TestSend {
    public static void main(String[] args) {
        System.out.println("学生上线...");
        //1.准备套接字：
        DatagramSocket ds = null;
        try {
            ds = new DatagramSocket(8888);
            //2.准备数据包：
            String str = "你好";
            byte[] bytes = str.getBytes();
            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName("192.168.137.48"),9999);

            //发送
            ds.send(dp);

            //学生接收老师的回复
            byte[] bytes1 = new byte[1024];
            DatagramPacket dp2 = new DatagramPacket(bytes1, bytes1.length);
            ds.receive(dp2);
            String s = new String(dp2.getData(),0,dp2.getLength());//数据包中的有效长度
            System.out.println("老师对我说："+s);
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //关闭资源
            ds.close();
        }
    }
}
```

TestReceive

```java
package com.msb.test02;

import javax.xml.crypto.Data;
import java.io.IOException;
import java.net.*;

public class TestReceive {
    public static void main(String[] args) {
        System.out.println("老师上线了...");
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = null;
        try {
            ds = new DatagramSocket(9999);
            //2.有一个空的数据表，打算用来接收对方传过来的数据包
            byte[] bytes = new byte[1024];
            DatagramPacket dp = new DatagramPacket(bytes, bytes.length);
            //3.接收对方的数据包，然后放入我们的dp数据包中填充。
            ds.receive(dp);//接收完后dp中就填充好内容了
            //4.取出数据：
            String s = new String(dp.getData(),0,dp.getLength());//数据包中的有效长度
            System.out.println("学生对我说："+s);

            //老师进行回复：
            String str = "同学，你也好";
            byte[] bytes1 = str.getBytes();
            //封装数据并且指定学生的IP和端口号
            DatagramPacket dp2 = new DatagramPacket(bytes1, bytes1.length, InetAddress.getByName("192.168.137.48"), 8888);
            ds.send(dp2);
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //5.关闭资源
            ds.close();
        }
    }
}
```

完整通信

两者的try中都加上while(true),无限通话

要中断，加入if判断break即可。

**和百度通讯**

exec 这一步在内核进行，其余的在用户层进行。

exec 8<> /dev/tcp/ww.baidu.com/80 

'<'表示输入流，'>'表示输出流，8表示一个指向某个channel的指针，/dev/tcp/ww.baidu.com/80 看着像文件，其实是一个socket，之所以像文件是因为linux万物皆文件。

echo "GET / HTTP/1.0\n"

"请求方式+url+协议"(请求头) echo拿来打印字符串，加上 -e 则会识别换行符

echo "GET / HTTP/1.0\n" 1>& 8

这一句的意思是让echo的标准输出重定向到了8。

1在这表示为标准输出，'>'表示重定向到文件，加上'&'相当于重定向到文件描述符

cat 0<& 8

这一句的意思是读取8这个channel中的内容。

0在这表示标准输入，

查询channels

1、cd /proc/$$/fd 

2、ll

8：文件描述符 fd -》类似 java 中的变量引用

lsof -p $$ 查看使用了自定义套接字的网络连接状态。

**exec 的作用解释**

ls cd 软件，这些软件叫做shell的外壳（外壳程序：持续性等待用户输入）

命令程序 ls 显示完会退出

exec 会用命令程序 ls 来替换掉 ls 软件，进程会随着消亡，单写exec不会采取任何操作。

### 网络传输层（传输控制层）

#### **SOCKET套接字**

IP+PORT -> IP+PORT

![image-20210619164144407](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210619164144407.png)

这个是可行的，因为ip+port才是唯一区分的key

socket -> id 数字 -> worker进程

多个socket对应一个进程：多路复用器 EPOLL

#### **何为TCP协议**

面向连接的可靠传输协议

**三次握手**

1、Client 发一个数据包 syn

2、Server 返回一个数据包 syn+ack

3、Client 发一个数据包 ack

连接通了之后两端才会有资源的开辟，才能有数据传输

**四次挥手**

1、Client 发一个数据包 fin

2、Server 发一个数据包 fin+ack

3、Server 发一个数据包 fin

4、Client 发一个 ack

找包得到的 TCP 传输细节

![image-20210619170219093](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210619170219093.png)

从中可以看到数据包是存在限制的。

三次握手和四次挥手是不可被分割的！

高并发负载均衡 LVS 4 负载均衡器，必须受制于协议约束。

DDos攻击：疯狂发握手请求，但是不回复。

### 网络层

**寻址** IP

同网段走的是sip协议

查看网卡配置信息：

/etc/sysconfig/network-scripts

网卡配 ip，一般要写出4个维度。

1、IP地址

2、掩码

3、网关

4、DNS域名解析

网络号 ip和掩码做按位与运算得到，网络号一致就是网段相同

主机号

**路由** route

![image-20210626145918364](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210626145918364.png)

route -n 查看路由表

不同局域网连通直接通过下一跳交给默认网关来处理。

#### 存在两种方式，一种是未划分子网的分组转发，一种是划分子网的分组转发。

**未划分子网的分组转发**

1、路由接收到数据报中的目的主机ip地址，记为D，得出目的主机的网络地址N。

2、若N就是与此路由器直接相连的网络地址中的其中一个则进行直接转发（期间有进行ip地址与物理地址的转换和数据报的解析与封装），否则进行下一步。

3、在当前路由的路由表中找到目的主机ip地址为D的特定主机路由，找到对应的下一跳路由器地址，将数据报转发给该路由器，由该路由器进行分组转发，否则进行下一步。

4、在当前路由的路由表中找到目的主机网络地址为N的下一跳路由器地址，将数据报转发给该路由器，由该路由器进行分组转发，否则进行下一步。

5、若上述步骤都无法进行，查看有无默认路由，有则传送数据报给它，并用它进行分组转发，无则返回响应，分组转发出错。

**划分子网的分组转发**

1、有ip数据包首部获得目的主机的ip地址，记为D。

2、将D与当前路由直接相连的所有网络地址的子关掩码进行与运算，判断是否目的主机与当前路由直接相连，若相连，则直接将数据报直接转发给目的主机，否则进行下一步。

3、若在当前路由的路由表中存在对应D的特定主机路由，则将数据报转发给该路由，由其进行分组转发。

4、将D与当前路由的路由表中的所有子关掩码进行与运算，找到负责D所在网段的下一跳路由器地址，将数据报转发给该路由器，有该路由器进行分组转发，否则进行下一步。

5、若上述步骤都无法进行，查看有无默认路由，有则转发数据报给它，并用它进行分组转发，无则返回响应，分组转发出错。

### 链路层

地址解析协议 arp协议

查看arp协议详情命令 arp -a

删除arp中的某个网关的 mac 的信息 arp -d（默认网关会不断地自动请求，故删除后也会恢复）

想要在删除状态下传输可以采用：arp -d 网关地址 && curl www.baidu.com

![image-20210626153420767](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210626153420767.png)

这图中ip不变，ip变为网络层，mac（物理地址）变成链路层

有了 mac 才会有三次握手，数据传输，四次挥手。

VPN：数据包背着数据包。、

arp工作流程

1、现在当前主机的arp高速缓存中查找是否存在目的主机的ip地址与其物理/硬件地址的映射条目，若存在，则将查表得到的目的硬件地址加入到MAC帧的首部，将该MAC帧发到局域网中，否则进行下一步。

2、源主机将源主机ip和源主机硬件地址、目的ip封装为arp请求分组后广播到所在的局域网中。

3、目的ip的主机收到广播的arp请求分组后，把其ip地址和其硬件地址封装为arp响应分组发给源主机。

4、源主机收到响应后，在arp高速缓存中记录下目的ip主机和其硬件地址的映射关系。

### 网络通信

抓包工具：tcpdump

tcpdump -nn -i eth0 port 80 

保证了长连接是因为应用层设置了一个控制传输控制层的标识，keepalive

自建立连接： 

nc node02 6379    [nc(netcat),node02为设置的节点名，6379为端口号]

可以看到自建立连接不会断开。

netstat -natp 显示所有ip号和端口号 n为数值显示，a为显示所有，tp表示只显示和tcp有关的。

套接字 唯一表示

通信其实是在两个区域内的！

得有通信才能对接上 netty 网络IO

OSI 七层参考模型

上方有。

exec	22<>	/dev/tcp/www.baidu.com/80     和百度的服务器建立了长连接

提醒：通信是通信，拿到东西给别的应用程序处理是应用层处理的。

exec 22<&- 关闭文件描述符是22的套接字

exec 通信是内核完成的。

用户空间，程序员实现应用层协议。

跟啥对象通信就要遵循相应的协议！

TCP，面向连接的可靠的传输协议！！！

连接：

开辟了资源空间，建立连接后的对象之间资源存在交互。

三次握手

![image-20210626164921434](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210626164921434.png)

syn：同步（synchronized）

ack：承认（acknowledge）

四次挥手（为的是资源有保障的释放）

fin：完成（finish）

ack：承认（acknowledge）

![image-20210629164534968](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210629164534968.png)

14-1：12：40

