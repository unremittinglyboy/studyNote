**1、**![image-20210922112920061](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210922112920061.png)

**2、**

​	遇到中文乱码时，想想URLEncode()

**3、**

![image-20210924094351956](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210924094351956.png)

遇到yum进程被锁定导致无法安装时。

**4、**

![image-20210925222422609](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210925222422609.png)

**5、**

​	直接写入java主目录的mapper.xml会无法扫到，需要在pom.xml加入下图中的配置：

![image-20210925222556388](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210925222556388.png)

**6、**

![image-20210925224405916](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20210925224405916.png)

**7、**

使用MyBatis Mapper.xml时，List类型作为返回值时，写入的是resultType="该集合的泛型类型"

**8、**

![QQ图片20211023221019](C:\Users\桁仔\Desktop\QQ图片20211023221019.png)

**9、**

![image-20211026211828063](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20211026211828063.png)

**10、**

jquery中的attr对html"已有属性"操作存在问题，建议使用prop。

**11、**

elasticsearch不是使用docker容器运行的服务，需要修改配置文件里面的如下语句,取消注释,删掉, “node-2”
cluster.initial_master_nodes: [“node-1”, “node-2”]

![image-20211113221858580](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20211113221858580.png)

**12、**

pageHelper的自动分页函数 startPage(int pageNum,  int pageSize) 只对数据库查询起效

采用手动分页

```java
    private <T> PageInfo<T> getPageInfo(int currentPage, int pageSize, List<T> list) {
        int total = list.size();
        if (total > pageSize) {
            int toIndex = pageSize * currentPage;
            if (toIndex > total) {
                toIndex = total;
            }
            list = list.subList(pageSize * (currentPage - 1), toIndex);
        }
        Page<T> page = new Page<>(currentPage, pageSize);
        page.addAll(list);
        page.setPages((total + pageSize - 1) / pageSize);
        page.setTotal(total);

        PageInfo<T> pageInfo = new PageInfo<>(page);
        return pageInfo;
    }
```

**13、**

放在springboot的本地图片地址存于数据库，要结合thymeleaf展示该地址下的图片需要使用@{${book.picUrl}}。

**14、**

文件域图片在线预览

![image-20211207113314814](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20211207113314814.png)

**15、**

```
在SpringBoot项目中，配置spring.http.multipart.maxFileSize用于限定最大文件上传大小。

但是，SpringBoot版本不同，关于这一块的配置也不相同。

1、Spring Boot 1.3 版本：

multipart.maxFileSize

2、Spring Boot 1.4 版本和 1.5 版本：

spring.http.multipart.maxFileSize

3、Spring Boot 2.0 版本：

spring.servlet.multipart.maxFileSize

以上，要注意1.4、1.5版本和2.0版本的区别，不然会一直提示无效。

附 application.yml 配置示例：

spring:
servlet:
multipart:
enabled: true
max-file-size: -1
```

**16、**

[文件上传功能报错Current request is not a multipart request](https://www.cnblogs.com/lxxcn/p/12804820.html)

如标题，在文件上传功能报这种错误时，原因是form标签内未添加enctype="multipart/form-data"，因为在表单中的默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据。

**17、**

通过$('xxx').serialize()可以对form表单进行序列化，从而将form表单中的所有参数传递到服务端。

但是上述方式，只能传递一般的参数，上传文件的文件流是无法被序列化并传递的。

不过如今主流浏览器都开始支持一个叫做FormData的对象，有了这个FormData，我们就可以轻松地使用Ajax方式进行文件上传了。

![image-20211210211508181](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20211210211508181.png)

![image-20211210213025220](C:\Users\桁仔\AppData\Roaming\Typora\typora-user-images\image-20211210213025220.png)

**18、**

SpringBoot+Thymeleaf修改图片路径后，刷新界面不能马上生效，需要重启服务器才能显示的问题

https://blog.csdn.net/m0_45025658/article/details/108810123
